// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZeroSigma.Infrastructure.Persistance;

#nullable disable

namespace ZeroSigma.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230505085942_updated useraccessToken and userRefreshToken tables")]
    partial class updateduseraccessTokenanduserRefreshTokentables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ZeroSigma.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ZeroSigma.Domain.Entities.UserAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccessTokenID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RefreshTokenID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AccessTokenID")
                        .IsUnique();

                    b.HasIndex("RefreshTokenID")
                        .IsUnique();

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("UsersAccess");
                });

            modelBuilder.Entity("ZeroSigma.Domain.Entities.UserAccessBlackList", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RefreshTokenID")
                        .HasColumnType("char(36)");

                    b.Property<string>("RevokedRefreshTokens")
                        .IsRequired()
                        .HasMaxLength(7000)
                        .HasColumnType("varchar(7000)");

                    b.HasKey("Id");

                    b.HasIndex("RefreshTokenID")
                        .IsUnique();

                    b.ToTable("UsersAccessBlackLists");
                });

            modelBuilder.Entity("ZeroSigma.Domain.Entities.UserAccessToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IsExpired")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("UsersAccessToken");
                });

            modelBuilder.Entity("ZeroSigma.Domain.Entities.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IsExpired")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("UsersRefreshToken");
                });

            modelBuilder.Entity("ZeroSigma.Domain.Entities.UserAccess", b =>
                {
                    b.HasOne("ZeroSigma.Domain.Entities.UserAccessToken", null)
                        .WithOne()
                        .HasForeignKey("ZeroSigma.Domain.Entities.UserAccess", "AccessTokenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZeroSigma.Domain.Entities.UserRefreshToken", null)
                        .WithOne()
                        .HasForeignKey("ZeroSigma.Domain.Entities.UserAccess", "RefreshTokenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZeroSigma.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("ZeroSigma.Domain.Entities.UserAccess", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZeroSigma.Domain.Entities.UserAccessBlackList", b =>
                {
                    b.HasOne("ZeroSigma.Domain.Entities.UserRefreshToken", null)
                        .WithOne()
                        .HasForeignKey("ZeroSigma.Domain.Entities.UserAccessBlackList", "RefreshTokenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
